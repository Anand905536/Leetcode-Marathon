 string compute(string num1,string num2)
 {
     string ans="";
     int carry=0;
     int n1=num1.length()-1;
     int n2=num2.length()-1;
     while(n1>=0 || n2>=0)
     {
         if(n1<0)
         {
             ans.push_back(((num2[n2]-48+carry)%10)+48);
             carry=(num2[n2]-48+carry)/10;
             n2--;
         }
         else if(n2<0)
         {
             ans.push_back(((num1[n1]-48+carry)%10)+48);
             carry=(num1[n1]-48+carry)/10;
             n1--;
         }
         else{
             ans.push_back(((num1[n1]-48)+(num2[n2]-48)+carry)%10+48);
             carry=((num1[n1]-48)+(num2[n2]-48)+carry)/10;
             n1--;
             n2--;
         }
     }
     if(carry)ans.push_back(carry+48);
     
     reverse(ans.begin(),ans.end());
     return ans;
  }
    
    vector<int> addToArrayForm(vector<int>& num, int k) {
        string vec="";
        string numb="";
        string ans="";
        int i=0;
        while(i<num.size()){
            vec+=to_string(num[i++]);
        }
            
        numb=to_string(k);
        ans=compute(vec,numb);
        vector<int>res;
        for(int i=0;i<ans.length();i++)
        {
          res.push_back(int(ans[i]-48));  
        }
        cout<<ans<<endl;
        return res;
    }
