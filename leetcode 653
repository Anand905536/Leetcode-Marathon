//Code might looks scary but approach is too simple what i did, first i take vector v and 
//passes it to the another function with root node, BST have property that all 
//left childs are smaller then right childs so i filled my vector with inorder traversal so that my vector remain sort and
//In original function i am just checking with simple two pointer approach 





   void compute(TreeNode* root,vector<int>&v)
    {
        if(root==NULL)return;          //base case
		
        compute(root->left,v);          //left call 
        v.push_back(root->val);
        compute(root->right,v);       //right call
    }
    bool findTarget(TreeNode* root, int k) {
        vector<int>v;         		
       compute(root,v);               //calling another function    
        int i=0;
        int j=v.size()-1;
        while(i!=j)                     // two pointer approach 
        {
            if(v[i]+v[j]>k)j--;               
            else if(v[i]+v[j]<k)i++;  
            else return true;
        } 
        return false;
    }
