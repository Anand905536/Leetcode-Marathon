 bool wordPattern(string pattern, string s) {
        
     unordered_map<char,string>mp;
	 unordered_set<string> st;
	 int i=0;
	 int j=0;
	 while(i<pattern.length() && j<s.length())
	 {
	 	char ch=pattern[i];
	 	string ans="";

	 	while(j<s.length() && !isspace(s[j]))
	 		ans+=s[j++];
	 	    // cout<<ans<<endl;

	 	if(mp.find(ch)!=mp.end())
	 	{
	 		if(mp[ch]!=ans)
	 			return false;
	 	}
	 	else 
	 	{
	 		if(st.find(ans)!=st.end())
	 			return false;

           
	 		mp[ch]=ans;
	 		// cout<<ch<<" "<<ans<<endl;
	 		st.insert(ans);
	 	}

	 	i++;
	 	j++;
	 }
	 for(auto i:mp)cout<<i.first<<" "<<i.second<<endl;
	 	for(auto i:st)cout<<i<<endl;
	if(i < pattern.size() || j < s.size())
            return false;
        return true;
    }
