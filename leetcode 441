    int arrangeCoins(int n) {
//         1st method     simple math
        
       // return (int)(sqrt(8l*n+1)-1)/2;
        
        
//         2nd method        iterative solution
        
	// int k=0;
	// while(n>0)
	// {
	// 	k++;
	// 	n-=k;
	// }
	// return n==0?k:k-1;
	// }
        
//         3rd method       bit manupulation
        
//          int mask = 1 << 15;
//         long result = 0;

//         while (mask > 0) {
//             long temp = result | mask;
//             long coinsFilled = temp * (temp + 1) / 2;
//             if (coinsFilled == n) {
//                 return (int) temp;
//             }
//             if (coinsFilled < n) {
//                 result = temp;
//             }
//             mask >>= 1;
//         }

//         return (int) result;
        
        
//         method 4 binary search
        
//          if (n <= 1) {
//             return n;
//         }
//         if (n <= 3) {
//             return n == 3 ? 2 : 1;
//         }

//         // Binary Search space will start from 2 to n/2.
        
//         long start = 2;
//         long end = n / 2;
//         while (start <= end) {
//             long mid = start + (end - start) / 2;
//             long coinsFilled = mid * (mid + 1) / 2;
//             if (coinsFilled == n) {
//                 return (int) mid;
//             }
//             if (coinsFilled < n) {
//                 start = mid + 1;
//             } else {
//                 end = mid - 1;
//             }
//         }

//         // Since at this point start > end, start will start pointing to a value greater
//         // than the desired result. We will return end as it will point to the correct
//         // int value.
//         return (int) end;
    }
